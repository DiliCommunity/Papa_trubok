const { Scenes, Markup } = require('telegraf');
const gameManager = require('../gameManager');

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
const MAX_ANSWERS = 10;

function createStyledMessage(title, content, emoji = 'üìù') {
  return `<b>üî∏üîπüî∏ ${emoji} ${title} ${emoji} üî∏üîπüî∏</b>\n\n${content}`;
}

const customQuestionScene = new Scenes.BaseScene('custom_question_scene');

customQuestionScene.enter((ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã:',
    Markup.inlineKeyboard([[Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_custom_question')]])
  );
});

customQuestionScene.action('cancel_custom_question', (ctx) => {
  ctx.reply('–í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω');
  return ctx.scene.leave();
});

customQuestionScene.on('text', async (ctx) => {
  const customQuestion = ctx.message.text;
  const gameId = ctx.scene.state?.gameId;
  
  console.log(`–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: "${customQuestion}", gameId: ${gameId}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  
  const games = gameManager.getGames();
  
  if (!games[gameId]) {
    console.error(`–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ —Å ID ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞`);
    return ctx.reply('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'start_game')]
      ])
    });
  }
  
  const game = games[gameId];
  console.log(`–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: ${game.status}, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${game.initiatorName}`);
  
  game.currentQuestion = customQuestion;
  game.question = customQuestion;
  game.isCustomQuestion = true;
  
  // –í–ê–ñ–ù–û: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'waiting_players', —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
  // –ù–ï –ú–ï–ù–Ø–ï–ú game.status = 'collecting_answers';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
  gameManager.setGame(gameId, game);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const updatedGames = gameManager.getGames();
  console.log(`–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∏–≥—Ä–∞ ${gameId} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${updatedGames[gameId]?.status} –∏ –≤–æ–ø—Ä–æ—Å "${updatedGames[gameId]?.currentQuestion}"`);
  
  // –û—Ç–≤–µ—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é
  ctx.reply(
    createStyledMessage('–í–û–ü–†–û–° –°–û–ó–î–ê–ù', 
      `–í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å:\n\n"${customQuestion}"\n\n` +
      `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${game.participants.length}/${MAX_ANSWERS}\n\n` +
      `–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.`, '‚úÖ'),
    { 
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', `provide_answer_${gameId}`)],
        [Markup.button.callback('‚è≥ –ñ–¥–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', `wait_for_answers_${gameId}`)]
      ])
    }
  );
  
  return ctx.scene.leave();
});

module.exports = customQuestionScene;
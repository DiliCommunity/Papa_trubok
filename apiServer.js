const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const gameManager = require('./gameManager');
const userManager = require('./userManager');
const path = require('path');
const dotenv = require('dotenv');
const { Telegraf, Scenes, session } = require('telegraf');
const { Markup } = require('telegraf');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—ã
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: ${process.env.NODE_ENV}`);

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middlewares
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
gameManager.loadGames();
userManager.loadUsers();

// –°—Ü–µ–Ω—ã
const nameScene = require('./scenes/nameScene');
const answerScene = require('./scenes/answerScene');
const customQuestionScene = require('./scenes/customQuestionScene');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω
const stage = new Scenes.Stage([nameScene, answerScene, customQuestionScene]);
bot.use(session());
bot.use(stage.middleware());

// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
const MAX_ANSWERS = 10;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function finishGame(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) return;
  
  // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  game.active = false;
  game.status = 'results';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  gameManager.setGame(gameId, game);
  
  console.log(`–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã`);
}

function createStyledMessage(title, content, emoji = 'üìù') {
  return `<b>üî∏üîπüî∏ ${emoji} ${title} ${emoji} üî∏üîπüî∏</b>\n\n${content}`;
}

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò CALLBACK'–û–í ---

bot.command('start', async (ctx) => {
  try {
    await ctx.reply(
      createStyledMessage('–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨', '–Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Å–º–µ—à–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã PapaTrubok. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', 'üé≠'),
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üöÄ –°—Ç–∞—Ä—Ç', 'start_game')]
        ])
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start');
  }
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã
app.get('/api/games', (req, res) => {
  const games = gameManager.getGames();
  console.log('–í—Å–µ–≥–æ –∏–≥—Ä –≤ —Å–∏—Å—Ç–µ–º–µ:', Object.keys(games).length); // –û—Ç–ª–∞–¥–∫–∞
  
  const activeGames = Object.entries(games)
    .filter(([id, game]) => {
      console.log(`–ò–≥—Ä–∞ ${id}:`, game.active, game.status); // –û—Ç–ª–∞–¥–∫–∞
      return game.active && 
            (game.status === 'waiting_players' || game.status === 'collecting_answers');
    })
    .map(([id, game]) => ({
      id,
      name: game.initiatorName,
      count: game.participants.length,
      hasQuestion: !!game.currentQuestion,
      status: game.status
    }));
  
  console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:', activeGames.length); // –û—Ç–ª–∞–¥–∫–∞
  res.json(activeGames);
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
app.get('/api/games/:gameId', (req, res) => {
  const gameId = req.params.gameId;
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  res.json({
    id: gameId,
    initiatorName: game.initiatorName,
    status: game.status,
    participants: game.participants.length,
    currentQuestion: game.currentQuestion,
    answers: Object.keys(game.answers || {}).length,
    maxAnswers: 10
  });
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
app.post('/api/games', (req, res) => {
  const { userId, userName, question } = req.body;
  
  if (!userId || !userName || !question) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç ${userName} (${userId}): "${question}"`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userManager.setUser(userId, { funnyName: userName });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  const gameId = Date.now().toString();
  const newGame = {
    active: true,
    initiator: userId,
    initiatorName: userName,
    currentQuestion: question,
    answers: {},
    votes: {},
    votingActive: false,
    totalScores: {},
    status: 'waiting_players',
    rounds: [],
    participants: [userId],
    participantData: {
      [userId]: {
        username: userName,
        joinTime: new Date().toISOString()
      }
    },
    createdAt: new Date().toISOString(),
    isCustomQuestion: true
  };
  
  gameManager.setGame(gameId, newGame);
  
  console.log(`–ò–≥—Ä–∞ ${gameId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: ${newGame.status}, active: ${newGame.active}`);
  
  res.status(201).json({ gameId, status: 'success' });
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
app.post('/api/games/:gameId/join', (req, res) => {
  const gameId = req.params.gameId;
  const { userId, userName } = req.body;
  
  if (!userId || !userName) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (!game.active) {
    return res.status(400).json({ error: '–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞' });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userManager.setUser(userId, { funnyName: userName });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É
  if (!game.participants.includes(userId)) {
    game.participants.push(userId);
    
    if (!game.participantData) game.participantData = {};
    
    game.participantData[userId] = {
      username: userName,
      joinTime: new Date().toISOString()
    };
    
    gameManager.setGame(gameId, game);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
    try {
      bot.telegram.sendMessage(
        game.initiator,
        `üéÆ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!\n\n${userName} –≤–æ—à–µ–ª –≤ –∏–≥—Ä—É.\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${game.participants.length}/10`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å', callback_data: `start_game_now_${gameId}` }]
            ]
          }
        }
      );
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã:', e);
    }
  }
  
  res.json({ status: 'success', gameId, question: game.currentQuestion });
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
app.post('/api/games/:gameId/answer', (req, res) => {
  const gameId = req.params.gameId;
  const { userId, answer } = req.body;
  
  if (!userId || !answer) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  const users = userManager.getUsers();
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (!game.participants.includes(userId)) {
    return res.status(403).json({ error: '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã' });
  }
  
  if (game.status !== 'collecting_answers' && game.status !== 'waiting_players') {
    return res.status(400).json({ error: '–ò–≥—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã' });
  }
  
  if (!game.answers) game.answers = {};
  
  game.answers[userId] = {
    text: answer,
    username: users[userId].funnyName,
    timestamp: new Date().toISOString()
  };
  
  // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 10 –æ—Ç–≤–µ—Ç–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
  const answersCount = Object.keys(game.answers).length;
  if (answersCount >= 10) {
    game.status = 'voting';
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    game.participants.forEach(participantId => {
      try {
        bot.telegram.sendMessage(
          participantId,
          `üéØ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n\n–£–∂–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å 10 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n"${game.currentQuestion}"\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!`,
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', web_app: { url: 'https://–≤–∞—à-–¥–æ–º–µ–Ω.com' } }]
              ]
            }
          }
        );
      } catch (e) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
      }
    });
  }
  
  gameManager.setGame(gameId, game);
  
  res.json({ 
    status: 'success', 
    answersCount,
    remainingToVoting: Math.max(0, 10 - answersCount)
  });
});

// –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
app.post('/api/games/:gameId/startVoting', (req, res) => {
  const gameId = req.params.gameId;
  const { userId } = req.body;
  
  if (!userId) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.initiator != userId) {
    return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' });
  }
  
  const answersCount = Object.keys(game.answers || {}).length;
  if (answersCount < 2) {
    return res.status(400).json({ error: '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
  }
  
  game.status = 'voting';
  gameManager.setGame(gameId, game);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  game.participants.forEach(participantId => {
    try {
      bot.telegram.sendMessage(
        participantId,
        `üéØ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É:\n"${game.currentQuestion}"\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', web_app: { url: 'https://–≤–∞—à-–¥–æ–º–µ–Ω.com' } }]
            ]
          }
        }
      );
    } catch (e) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
    }
  });
  
  res.json({ status: 'success' });
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.get('/api/games/:gameId/answers', (req, res) => {
  const gameId = req.params.gameId;
  const userId = req.query.userId;
  
  if (!userId) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.status !== 'voting') {
    return res.status(400).json({ error: '–ò–≥—Ä–∞ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã, –∫—Ä–æ–º–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const answers = Object.entries(game.answers || {})
    .filter(([uid]) => uid !== userId.toString())
    .map(([uid, ans]) => ({
      id: uid,
      text: ans.text,
      username: ans.username
    }));
    
  res.json({ answers, question: game.currentQuestion });
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–∞
app.post('/api/games/:gameId/vote', (req, res) => {
  const gameId = req.params.gameId;
  const { userId, votedFor } = req.body;
  
  if (!userId || !votedFor || !Array.isArray(votedFor) || votedFor.length > 2) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.status !== 'voting') {
    return res.status(400).json({ error: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
  if (votedFor.includes(userId.toString())) {
    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π –æ—Ç–≤–µ—Ç' });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞
  if (!game.votes) game.votes = {};
  game.votes[userId] = votedFor;
  
  gameManager.setGame(gameId, game);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
  const allVoted = game.participants.every(uid => 
    game.votes[uid] && game.votes[uid].length > 0);
    
  if (allVoted) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    calculateResults(gameId);
    res.json({ status: 'success', resultsReady: true });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    notifyAboutResults(gameId);
  } else {
    res.json({ status: 'success', resultsReady: false });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.get('/api/games/:gameId/results', (req, res) => {
  const gameId = req.params.gameId;
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.status !== 'results') {
    return res.status(400).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã' });
  }
  
  res.json({
    question: game.currentQuestion,
    results: game.lastResults || []
  });
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function calculateResults(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) return;
  
  game.status = 'results';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
  const votes = {};
  Object.values(game.votes || {}).forEach(userVotes => {
    userVotes.forEach(votedFor => {
      votes[votedFor] = (votes[votedFor] || 0) + 1;
    });
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 
  const sortedResults = Object.entries(game.answers || {})
    .map(([userId, answer]) => ({
      userId,
      username: answer.username,
      text: answer.text,
      votes: votes[userId] || 0
    }))
    .sort((a, b) => b.votes - a.votes);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  game.lastResults = sortedResults;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
  if (!game.rounds) game.rounds = [];
  game.rounds.push({
    question: game.currentQuestion,
    results: sortedResults,
    completedAt: new Date().toISOString()
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
  if (!game.totalScores) game.totalScores = {};
  sortedResults.forEach(result => {
    game.totalScores[result.userId] = (game.totalScores[result.userId] || 0) + result.votes;
  });
  
  gameManager.setGame(gameId, game);
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
  setTimeout(() => finishGame(gameId), 30 * 60 * 1000);
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
function notifyAboutResults(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game || !game.lastResults) return;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  let resultText = `üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø\n\n–í–æ–ø—Ä–æ—Å: "${game.currentQuestion}"\n\n`;
  
  game.lastResults.forEach((result, index) => {
    let medal = '';
    if (index === 0) medal = 'ü•á ';
    else if (index === 1) medal = 'ü•à ';
    else if (index === 2) medal = 'ü•â ';
    
    resultText += `${medal}${result.username}: "${result.text}" - ${result.votes} –≥–æ–ª–æ—Å(–æ–≤)\n`;
  });
  
  resultText += '\n–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ! üëè';
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
  game.participants.forEach(participantId => {
    try {
      bot.telegram.sendMessage(
        participantId,
        resultText,
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', web_app: { url: 'https://–≤–∞—à-–¥–æ–º–µ–Ω.com' } }]
            ]
          }
        }
      );
    } catch (e) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
    }
  });
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è UptimeRobot)
app.get('/ping', (req, res) => {
  res.status(200).send('pong');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ—Ä–Ω—é
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'papyrus.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ API:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'production' ? null : err.message
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä —Ä–∞–∑ –≤ —á–∞—Å
setInterval(() => {
  const games = gameManager.getGames();
  const now = new Date();
  let cleaned = 0;
  
  Object.keys(games).forEach(gameId => {
    const game = games[gameId];
    if (game.createdAt) {
      const createdAt = new Date(game.createdAt);
      const ageInHours = (now - createdAt) / (1000 * 60 * 60);
      
      if (ageInHours > 24) { // –ò–≥—Ä–∞ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        gameManager.deleteGame(gameId);
        cleaned++;
      }
    }
  });
  
  if (cleaned > 0) {
    console.log(`–û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä`);
  }
}, 1000 * 60 * 60); // –ö–∞–∂–¥—ã–π —á–∞—Å

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
(async () => {
  try {
    await bot.telegram.setMyCommands([
      { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { command: 'newgame', description: '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É' },
      { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã' }
    ]);
    await bot.launch();
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
  }
})();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}/`);
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/api/debug/games', (req, res) => {
  const games = gameManager.getGames();
  
  // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const summary = Object.entries(games).map(([id, game]) => ({
    id,
    active: game.active,
    status: game.status,
    participants: game.participants?.length || 0,
    hasQuestion: !!game.currentQuestion,
    answers: Object.keys(game.answers || {}).length,
    votes: Object.keys(game.votes || {}).length,
    createdAt: game.createdAt
  }));
  
  res.json({
    totalGames: Object.keys(games).length,
    activeGames: summary.filter(g => g.active).length,
    games: summary
  });
});

app.get('/api/debug/users', (req, res) => {
  const users = userManager.getUsers();
  
  // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const summary = Object.entries(users).map(([id, user]) => ({
    id,
    funnyName: user.funnyName
  }));
  
  res.json({
    totalUsers: Object.keys(users).length,
    users: summary
  });
}); 
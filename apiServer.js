const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const gameManager = require('./gameManager');
const userManager = require('./userManager');
const path = require('path');
const dotenv = require('dotenv');
const fs = require('fs');
const shortid = require('shortid');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å db —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
let db;
try {
  db = require('./db');
  console.log('–ú–æ–¥—É–ª—å db.js —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (e) {
  console.warn('–ú–æ–¥—É–ª—å db.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞');
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è db
  db = {
    saveUser: (userId, userData) => userData,
    getUser: (userId) => null,
    getAllUsers: () => ({}),
    saveGame: (gameId, gameData) => gameData,
    getGame: (gameId) => null,
    getAllGames: () => ({}),
    deleteGame: () => true,
    deleteUser: () => true,
    get: (collection) => ({
      find: () => ({
        value: () => null,
        assign: () => ({ write: () => {} })
      }),
      push: () => ({ write: () => {} }),
      filter: () => ({
        size: () => ({
          value: () => 0
        })
      })
    })
  };
}

// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –º–æ–¥—É–ª—è io, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
let io;
try {
  io = require('./io');
  console.log('–ú–æ–¥—É–ª—å io.js —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (e) {
  console.warn('–ú–æ–¥—É–ª—å io.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞');
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è io
  io = {
    initConnection: () => ({}),
    closeConnection: () => true,
    on: () => {},
    emit: () => {},
    sendTo: () => true,
    broadcast: () => 0,
    to: () => ({
      emit: () => {}
    })
  };
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—ã
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: ${process.env.NODE_ENV}`);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
if (!process.env.WEB_APP_URL) {
  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –¥–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  process.env.WEB_APP_URL = process.env.NODE_ENV === 'production' 
    ? 'https://papatrubok.onrender.com'
    : 'http://localhost:3000';
  console.log(`WEB_APP_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫: ${process.env.WEB_APP_URL}`);
}

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
let bot = null;
try {
  if (process.env.BOT_TOKEN) {
    const { Telegraf, Scenes, session } = require('telegraf');
    const { Markup } = require('telegraf');
    bot = new Telegraf(process.env.BOT_TOKEN);
    
    // –°—Ü–µ–Ω—ã
    let nameScene, answerScene, customQuestionScene;
    try {
      nameScene = require('./scenes/nameScene');
      answerScene = require('./scenes/answerScene');
      customQuestionScene = require('./scenes/customQuestionScene');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω
      const stage = new Scenes.Stage([nameScene, answerScene, customQuestionScene]);
      bot.use(session());
      bot.use(stage.middleware());
      
      // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
      bot.command('start', async (ctx) => {
        try {
          await ctx.reply(
            `üé≠ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ üé≠\n\n–Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Å–º–µ—à–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã PapaTrubok. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [Markup.button.callback('üöÄ –°—Ç–∞—Ä—Ç', 'start_game')]
              ])
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start:', error);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start');
        }
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      bot.launch().then(() => {
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
        bot = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω –±–æ—Ç–∞:', err);
      bot = null;
    }
  } else {
    console.warn('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  }
} catch (e) {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞:', e);
  bot = null;
}

// Middlewares
app.use(cors());
app.use(bodyParser.json());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ public
const publicDir = path.join(__dirname, 'public');
if (fs.existsSync(publicDir)) {
  console.log(`–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${publicDir}`);
  app.use(express.static(publicDir));
} else {
  console.warn(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${publicDir}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
  const altPaths = [
    path.join(process.cwd(), 'public'),
    path.join(process.cwd(), 'src', 'public')
  ];
  
  let found = false;
  for (const altPath of altPaths) {
    if (fs.existsSync(altPath)) {
      console.log(`–ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: ${altPath}`);
      app.use(express.static(altPath));
      found = true;
      break;
    }
  }
  
  if (!found) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏!');
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
gameManager.loadGames();
userManager.loadUsers();

// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
const MAX_ANSWERS = 10;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function finishGame(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) return;
  
  // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  game.active = false;
  game.status = 'results';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  gameManager.setGame(gameId, game);
  
  console.log(`–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã`);
}

function createStyledMessage(title, content, emoji = 'üìù') {
  return `<b>üî∏üîπüî∏ ${emoji} ${title} ${emoji} üî∏üîπüî∏</b>\n\n${content}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞)
function sendTelegramMessage(userId, text, options = {}) {
  if (!bot) {
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω): ${text}`);
    return Promise.resolve();
  }
  
  return bot.telegram.sendMessage(userId, text, options)
    .catch(error => {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
    });
}

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò CALLBACK'–û–í ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
  try {
    const callbackData = ctx.callbackQuery.data;
    console.log('–ü–æ–ª—É—á–µ–Ω callback:', callbackData);
    
    // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    if (callbackData === 'start_game') {
      // –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const webAppUrl = process.env.WEB_APP_URL || 'https://t.me/PapaTrubokBot/app';
      
      await ctx.answerCbQuery('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É...');
      await ctx.reply(
        createStyledMessage('–ó–ê–ü–£–°–ö –ò–ì–†–´', '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PapaTrubok.', 'üöÄ'),
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å –≤ PapaTrubok', web_app: { url: webAppUrl } }]
            ]
          }
        }
      );
    }
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    else if (callbackData.startsWith('start_game_now_')) {
      const gameId = callbackData.replace('start_game_now_', '');
      const games = gameManager.getGames();
      const game = games[gameId];
      
      if (!game) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      if (game.initiator != ctx.from.id.toString()) {
        await ctx.answerCbQuery('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
        return;
      }
      
      const answersCount = Object.keys(game.answers || {}).length;
      if (answersCount < 3) {
        await ctx.answerCbQuery('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      game.status = 'voting';
      gameManager.setGame(gameId, game);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
      const reminders = gameManager.getReminders();
      Object.keys(reminders).forEach(reminderId => {
        if (reminders[reminderId].gameId === gameId) {
          console.log(`–£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –¥–ª—è –∏–≥—Ä—ã ${gameId}, —Ç–∞–∫ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞`);
          gameManager.deleteReminder(reminderId);
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
      const webAppUrl = process.env.WEB_APP_URL || 'https://t.me/PapaTrubokBot/app';
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      if (Array.isArray(game.participants)) {
        game.participants.forEach(participantId => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (participantId && typeof participantId === 'string' && participantId.length > 0) {
              sendTelegramMessage(
                participantId,
                `üéØ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É:\n"${game.currentQuestion}"\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!`,
                {
                  parse_mode: 'HTML',
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', web_app: { url: webAppUrl } }]
                    ]
                  }
                }
              );
            }
          } catch (e) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
          }
        });
      }
      
      await ctx.answerCbQuery('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!');
      await ctx.reply('üéØ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
    ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã
app.get('/api/games', (req, res) => {
  const games = gameManager.getGames();
  console.log('–í—Å–µ–≥–æ –∏–≥—Ä –≤ —Å–∏—Å—Ç–µ–º–µ:', Object.keys(games).length); // –û—Ç–ª–∞–¥–∫–∞
  
  const activeGames = Object.entries(games)
    .filter(([id, game]) => {
      console.log(`–ò–≥—Ä–∞ ${id}:`, game.active, game.status); // –û—Ç–ª–∞–¥–∫–∞
      return game.active && 
            (game.status === 'waiting_players' || game.status === 'collecting_answers');
    })
    .map(([id, game]) => ({
      id,
      name: game.initiatorName,
      count: game.participants.length,
      hasQuestion: !!game.currentQuestion,
      status: game.status
    }));
  
  console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:', activeGames.length); // –û—Ç–ª–∞–¥–∫–∞
  res.json(activeGames);
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
app.get('/api/games/:gameId', (req, res) => {
  const gameId = req.params.gameId;
  const userId = req.query.userId;
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã
  const isCreator = userId && game.initiator === userId;
  
  res.json({
    id: gameId,
    initiatorName: game.initiatorName,
    status: game.status,
    participants: game.participants.length,
    currentQuestion: game.currentQuestion,
    answers: Object.keys(game.answers || {}).length,
    maxAnswers: 10,
    isCreator: isCreator
  });
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä
let statusCheckInterval = null;

function startStatusCheck() {
  if (statusCheckInterval) {
    clearInterval(statusCheckInterval);
  }
  
  statusCheckInterval = setInterval(() => {
    if (currentGame && currentGame.id) {
      checkGameStatus();
    }
  }, 5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function checkReminders() {
  const overdueReminders = gameManager.getOverdueReminders();
  
  if (overdueReminders.length === 0) {
    return;
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${overdueReminders.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
  
  overdueReminders.forEach(async (reminder) => {
    try {
      const games = gameManager.getGames();
      const game = games[reminder.gameId];
      
      if (!game) {
        console.log(`–ò–≥—Ä–∞ ${reminder.gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id}`);
        gameManager.deleteReminder(reminder.id);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (game.status !== 'waiting_players' && game.status !== 'collecting_answers') {
        console.log(`–ò–≥—Ä–∞ ${reminder.gameId} —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è (${game.status}), —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.id}`);
        gameManager.deleteReminder(reminder.id);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
      const webAppUrl = process.env.WEB_APP_URL || 'https://t.me/PapaTrubokBot/app';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
      sendTelegramMessage(
        reminder.userId,
        createStyledMessage('–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ì–û–õ–û–°–û–í–ê–ù–ò–ò', 
          `–ü—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–π –∏–≥—Ä—ã!\n\n` +
          `–í–æ–ø—Ä–æ—Å: "${game.currentQuestion}"\n\n` +
          `–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${game.participants.length}\n` +
          `–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: ${Object.keys(game.answers || {}).length}\n\n` +
          `–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`, '‚è∞'),
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', callback_data: `start_game_now_${reminder.gameId}` }],
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: webAppUrl } }]
            ]
          }
        }
      );
      
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã ${reminder.gameId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${reminder.userId}`);
      
      // –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
      gameManager.markReminderAsNotified(reminder.id);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.id}:`, error);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(checkReminders, 5 * 60 * 1000);

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
app.post('/api/games', (req, res) => {
  const { userId, userName, question } = req.body;
  
  if (!userId || !userName || !question) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç ${userName} (${userId}): "${question}"`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userManager.setUser(userId, { funnyName: userName });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
  const gameId = Date.now().toString();
  const newGame = {
    active: true,
    initiator: userId,
    initiatorName: userName,
    currentQuestion: question,
    answers: {},
    votes: {},
    votingActive: false,
    totalScores: {},
    status: 'waiting_players',
    rounds: [],
    participants: [userId],
    participantData: {
      [userId]: {
        username: userName,
        joinTime: new Date().toISOString()
      }
    },
    createdAt: new Date().toISOString(),
    isCustomQuestion: true
  };
  
  gameManager.setGame(gameId, newGame);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
  const reminderId = gameManager.addVotingReminder(gameId, userId);
  console.log(`–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –¥–ª—è –∏–≥—Ä—ã ${gameId}`);
  
  console.log(`–ò–≥—Ä–∞ ${gameId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: ${newGame.status}, active: ${newGame.active}`);
  
  res.status(201).json({ gameId, status: 'success' });
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
app.post('/api/games/:gameId/join', (req, res) => {
  const gameId = req.params.gameId;
  const { userId, userName, anonymous } = req.body;
  
  if (!userId || !userName) {
    return res.status(400).json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (!game.active) {
    return res.status(400).json({ error: '–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞' });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userManager.setUser(userId, { 
    funnyName: userName,
    anonymous: !!anonymous // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
  const isCreator = game.initiator === userId;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É
  if (!game.participants.includes(userId)) {
    game.participants.push(userId);
    
    if (!game.participantData) game.participantData = {};
    
    game.participantData[userId] = {
      username: userName,
      anonymous: !!anonymous, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
      joinTime: new Date().toISOString()
    };
    
    // –ï—Å–ª–∏ —É –∏–≥—Ä—ã –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ—ë –≤ —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (game.currentQuestion && game.status === 'waiting_players') {
      game.status = 'collecting_answers';
      console.log(`–ò–≥—Ä–∞ ${gameId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤`);
    }
    
    gameManager.setGame(gameId, game);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if (!isCreator) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (game.initiator && typeof game.initiator === 'string' && game.initiator.length > 0) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
          let playerName = anonymous ? '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫' : userName;
          
          // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å 3 –∏–ª–∏ –±–æ–ª–µ–µ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
          const participantCount = game.participants.length;
          
          sendTelegramMessage(
            game.initiator,
            `üéÆ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!\n\n${playerName} –≤–æ—à–µ–ª –≤ –∏–≥—Ä—É.\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${participantCount}/10`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–µ–π—á–∞—Å', callback_data: `start_game_now_${gameId}` }]
                ]
              }
            }
          );
          
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ—Ç–∏–π –∏–≥—Ä–æ–∫, —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
          if (participantCount === 3) {
            const reminderId = gameManager.addVotingReminder(gameId, game.initiator);
            console.log(`–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –¥–ª—è –∏–≥—Ä—ã ${gameId} –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 3-–≥–æ –∏–≥—Ä–æ–∫–∞`);
          }
        } else {
          console.warn(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã: ${game.initiator}`);
        }
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã:', e);
      }
    }
  }
  
  res.json({ 
    status: 'success', 
    gameId, 
    question: game.currentQuestion, 
    status: game.status,
    isCreator: isCreator
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/register', (req, res) => {
  try {
    const { userId, name, method, metadata } = req.body;
    
    if (!userId || !method) {
      return res.status(400).json({ 
        status: 'error', 
        error: 'userId –∏ method –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.get('users')
      .push({
        id: userId,
        name: name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        method,
        metadata: metadata || {},
        registeredAt: Date.now(),
        lastLoginAt: Date.now()
      })
      .write();
    
    return res.json({ 
      status: 'success', 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return res.status(500).json({ 
      status: 'error', 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫—Ç–æ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª
app.post('/api/games/:gameId/answer', (req, res) => {
  try {
    const gameId = req.params.gameId;
    const { userId, answer, username, anonymous } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userId || !answer) {
      return res.status(400).json({ 
        status: 'error', 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç' 
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const game = db.get('games').find({ id: gameId }).value();
    
    if (!game) {
      return res.status(404).json({ 
        status: 'error', 
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–∑–µ —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (game.status !== 'collecting_answers') {
      return res.status(400).json({ 
        status: 'error', 
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–∑–µ —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingAnswer = db.get('answers')
      .find({ gameId: gameId, userId: userId })
      .value();
    
    if (existingAnswer) {
      return res.status(400).json({ 
        status: 'error', 
        error: '–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å' 
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    const answerId = shortid.generate();
    const newAnswer = {
      id: answerId,
      gameId: gameId,
      userId: userId,
        text: answer,
      username: username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
      anonymous: anonymous === true,
      timestamp: Date.now(),
      votes: 0
    };
    
    db.get('answers')
      .push(newAnswer)
      .write();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ
    const answersCount = db.get('answers')
      .filter({ gameId: gameId })
      .size()
      .value();
    
    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 10 –æ—Ç–≤–µ—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if (answersCount >= 10 && game.status === 'collecting_answers') {
      db.get('games')
        .find({ id: gameId })
        .assign({ status: 'voting', updatedAt: Date.now() })
        .write();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
      io.to(gameId).emit('statusChanged', { 
        gameId: gameId, 
        status: 'voting',
        message: '–°–æ–±—Ä–∞–Ω–æ 10 –æ—Ç–≤–µ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.'
      });
    }
    
    return res.json({ 
        status: 'success',
      message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      answerId: answerId,
      answersCount: answersCount
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    return res.status(500).json({ 
      status: 'error', 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
app.get('/api/games/:gameId/check-answer', (req, res) => {
  try {
    const gameId = req.params.gameId;
    const userId = req.query.userId;
    
    if (!gameId || !userId) {
      return res.status(400).json({
        status: 'error',
        error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingAnswer = db.get('answers')
      .find({ gameId: gameId, userId: userId })
      .value();
    
    return res.json({
      status: 'success',
      hasAnswered: !!existingAnswer
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.post('/api/games/:gameId/startVoting', (req, res) => {
  const gameId = req.params.gameId;
  const { userId } = req.body;
  
  if (!gameId || !userId) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã
  if (game.initiator !== userId) {
    return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  if (game.status !== 'collecting_answers') {
    return res.status(400).json({ error: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
  const answersCount = Object.keys(game.answers || {}).length;
  if (answersCount < 3) {
    return res.status(400).json({ error: '–î–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –æ—Ç–≤–µ—Ç–∞' });
  }
  
  // –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  game.status = 'voting';
  gameManager.setGame(gameId, game);
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
  const reminders = gameManager.getReminders();
  Object.keys(reminders).forEach(reminderId => {
    if (reminders[reminderId].gameId === gameId) {
      console.log(`–£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –¥–ª—è –∏–≥—Ä—ã ${gameId}, —Ç–∞–∫ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ —á–µ—Ä–µ–∑ API`);
      gameManager.deleteReminder(reminderId);
    }
  });
  
  console.log(`–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –¥–ª—è –∏–≥—Ä—ã ${gameId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
  try {
    if (Array.isArray(game.participants)) {
      const webAppUrl = process.env.WEB_APP_URL || 'https://t.me/PapaTrubokBot/app';
      
      game.participants.forEach(participantId => {
        if (participantId && typeof participantId === 'string' && participantId.length > 0) {
          try {
            sendTelegramMessage(
              participantId,
              `üéØ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É:\n"${game.currentQuestion}"\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!`,
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', web_app: { url: webAppUrl } }]
                  ]
                }
              }
            );
          } catch (e) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
          }
        }
      });
    }
  } catch (notifyError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:', notifyError);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }
  
  return res.json({ success: true, message: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–æ' });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.post('/api/games/:gameId/vote', (req, res) => {
  const gameId = req.params.gameId;
  const { userId, votedFor } = req.body;
  
  if (!userId || !votedFor || !Array.isArray(votedFor) || votedFor.length > 2) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.status !== 'voting') {
    return res.status(400).json({ error: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
  if (votedFor.includes(userId.toString())) {
    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π –æ—Ç–≤–µ—Ç' });
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞
  if (!game.votes) game.votes = {};
  game.votes[userId] = votedFor;
  
  gameManager.setGame(gameId, game);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
  const allVoted = game.participants.every(uid => 
    game.votes[uid] && game.votes[uid].length > 0 || uid === userId);
    
  if (allVoted) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    calculateResults(gameId);
    res.json({ status: 'success', resultsReady: true });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    notifyAboutResults(gameId);
  } else {
    res.json({ status: 'success', resultsReady: false });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.get('/api/games/:gameId/results', (req, res) => {
  const gameId = req.params.gameId;
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  if (game.status !== 'results') {
    return res.status(400).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã' });
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const results = game.lastResults || [];
  
  res.json({
    question: game.currentQuestion,
    results: results
  });
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function calculateResults(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) return;
  
  game.status = 'results';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
  const votes = {};
  Object.values(game.votes || {}).forEach(userVotes => {
    userVotes.forEach(votedFor => {
      votes[votedFor] = (votes[votedFor] || 0) + 1;
    });
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 
  const sortedResults = Object.entries(game.answers || {})
    .map(([userId, answer]) => ({
      userId,
      username: answer.username,
      text: answer.text,
      anonymous: !!answer.anonymous, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
      votes: votes[userId] || 0
    }))
    .sort((a, b) => b.votes - a.votes);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  game.lastResults = sortedResults;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
  if (!game.rounds) game.rounds = [];
  game.rounds.push({
    question: game.currentQuestion,
    results: sortedResults,
    completedAt: new Date().toISOString()
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
  if (!game.totalScores) game.totalScores = {};
  sortedResults.forEach(result => {
    game.totalScores[result.userId] = (game.totalScores[result.userId] || 0) + result.votes;
  });
  
  gameManager.setGame(gameId, game);
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
  setTimeout(() => finishGame(gameId), 30 * 60 * 1000);
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
function notifyAboutResults(gameId) {
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game || !game.lastResults) return;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  let resultText = `üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø\n\n–í–æ–ø—Ä–æ—Å: "${game.currentQuestion}"\n\n`;
  
  game.lastResults.forEach((result, index) => {
    let medal = '';
    if (index === 0) medal = 'ü•á ';
    else if (index === 1) medal = 'ü•à ';
    else if (index === 2) medal = 'ü•â ';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π
    const displayName = result.anonymous ? '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : result.username;
    
    resultText += `${medal}${displayName}: "${result.text}" - ${result.votes} –≥–æ–ª–æ—Å(–æ–≤)\n`;
  });
  
  resultText += '\n–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ! üëè';
  
  // –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
  const webAppUrl = process.env.WEB_APP_URL || 'https://t.me/PapaTrubokBot/app';
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
  if (Array.isArray(game.participants)) {
    game.participants.forEach(participantId => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (participantId && typeof participantId === 'string' && participantId.length > 0) {
          sendTelegramMessage(
            participantId,
            resultText,
            {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', web_app: { url: webAppUrl } }]
                ]
              }
            }
          );
        }
      } catch (e) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`, e);
      }
    });
  } else {
    console.warn(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã ${gameId}`);
  }
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è UptimeRobot)
app.get('/ping', (req, res) => {
  res.status(200).send('pong');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ—Ä–Ω—é
app.get('/', (req, res) => {
  const htmlPath = path.join(__dirname, 'public', 'papyrus.html');
  
  if (fs.existsSync(htmlPath)) {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: ${htmlPath}`);
    res.sendFile(htmlPath);
  } else {
    console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
    const altPaths = [
      path.join(process.cwd(), 'public', 'papyrus.html'),
      path.join(process.cwd(), 'src', 'public', 'papyrus.html')
    ];
    
    for (const altPath of altPaths) {
      if (fs.existsSync(altPath)) {
        console.log(`–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –∫ HTML: ${altPath}`);
        return res.sendFile(altPath);
      }
    }
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    res.status(404).send(`
      <html>
        <head>
          <title>–û—à–∏–±–∫–∞ 404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #FF5722; }
            pre { background: #f4f4f4; padding: 15px; border-radius: 5px; }
          </style>
        </head>
        <body>
          <h1>–û—à–∏–±–∫–∞ 404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª papyrus.html.</p>
          <p>–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${__dirname}</p>
          <p>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:</p>
          <pre>${htmlPath}\n${altPaths.join('\n')}</pre>
        </body>
      </html>
    `);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ API:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'production' ? null : err.message
  });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä —Ä–∞–∑ –≤ —á–∞—Å
setInterval(() => {
  const games = gameManager.getGames();
  const now = new Date();
  let cleaned = 0;
  
  Object.keys(games).forEach(gameId => {
    const game = games[gameId];
    if (game.createdAt) {
      const createdAt = new Date(game.createdAt);
      const ageInHours = (now - createdAt) / (1000 * 60 * 60);
      
      if (ageInHours > 24) { // –ò–≥—Ä–∞ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        gameManager.deleteGame(gameId);
        cleaned++;
      }
    }
  });
  
  if (cleaned > 0) {
    console.log(`–û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä`);
  }
}, 1000 * 60 * 60); // –ö–∞–∂–¥—ã–π —á–∞—Å

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
if (bot) {
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}/`);
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/api/debug/games', (req, res) => {
  const games = gameManager.getGames();
  
  // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const summary = Object.entries(games).map(([id, game]) => ({
    id,
    active: game.active,
    status: game.status,
    participants: game.participants?.length || 0,
    hasQuestion: !!game.currentQuestion,
    answers: Object.keys(game.answers || {}).length,
    votes: Object.keys(game.votes || {}).length,
    createdAt: game.createdAt
  }));
  
  res.json({
    totalGames: Object.keys(games).length,
    activeGames: summary.filter(g => g.active).length,
    games: summary
  });
});

app.get('/api/debug/users', (req, res) => {
  const users = userManager.getUsers();
  
  // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const summary = Object.entries(users).map(([id, user]) => ({
    id,
    funnyName: user.funnyName
  }));
  
  res.json({
    totalUsers: Object.keys(users).length,
    users: summary
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
app.get('/api/games/:gameId/check-vote', (req, res) => {
  const gameId = req.params.gameId;
  const userId = req.query.userId;
  
  if (!userId) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  const hasVoted = game.votes && game.votes[userId];
  
  res.json({ hasVoted: !!hasVoted });
});

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ
app.get('/api/games/:gameId/answers-count', (req, res) => {
  try {
    const gameId = req.params.gameId;
    
    if (!gameId) {
      return res.status(400).json({
        status: 'error',
        error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    const answersCount = db.get('answers')
      .filter({ gameId: gameId })
      .size()
      .value();
    
    return res.json({
      status: 'success',
      count: answersCount
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤:', error);
    return res.status(500).json({
      status: 'error',
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/games/:gameId/user-answer', (req, res) => {
  const gameId = req.params.gameId;
  const userId = req.query.userId;
  
  if (!gameId || !userId) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userAnswer = game.answers && game.answers[userId];
  
  if (!userAnswer) {
    return res.status(404).json({ error: '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  return res.json({ answer: userAnswer.text });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
app.get('/api/games/:gameId/answers', (req, res) => {
  const gameId = req.params.gameId;
  const userId = req.query.userId;
  
  if (!gameId || !userId) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
  
  const games = gameManager.getGames();
  const game = games[gameId];
  
  if (!game) {
    return res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
  if (game.status !== 'voting') {
    return res.status(400).json({ error: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è' });
  }
  
  const answersData = [];
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
  if (game.answers) {
    for (const [answerId, answer] of Object.entries(game.answers)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (answerId === userId) continue;
      
      answersData.push({
        id: answerId,
        text: answer.text,
        username: answer.username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
        anonymous: answer.anonymous || false
      });
    }
  }
  
  return res.json({
    success: true,
    question: game.currentQuestion,
    answers: answersData
  });
}); 